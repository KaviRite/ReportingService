name: Deploy

on:
  push:
    tags:
      - "v*-dev-deploy"
      - "v*-qa-deploy"
      - "v*-stage-deploy"
      - "v*-prod-deploy"
  workflow_dispatch:
    inputs:
      deploy_version:
        type: string
        description: Version to deploy in format vX.Y.Z
      deploy_environment:
        type: choice
        description: Deploy Environment
        options:
          - dev
          - qa
          - stage
          - prod
jobs:

  tagify:
    name: Get Tag
    runs-on: ubuntu-latest
    outputs:
      the_tag: ${{ steps.deploy_tag.outputs.TAG_NAME }}
    steps:
      - name: Event Type
        run: |
          echo Processing Event: ${{ github.event_name }}
      - name: Get Deploy Tag
        if: ${{ github.event_name == 'push' }}
        run: |
          echo GHR ${GITHUB_REF}
          echo GHR_eval ${GITHUB_REF#refs/*/}
          full_tag=${GITHUB_REF#refs/*/}
          deploy_tag=${full_tag: 0:-7}
          echo "VERSION=${deploy_tag}" >> "$GITHUB_ENV" 
      - name: Manual Input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo Manual Run
          echo ${{ github.event.inputs.deploy_version }}
          echo "VERSION=${{ github.event.inputs.deploy_version }}-${{ github.event.inputs.deploy_environment }}" >> "$GITHUB_ENV" 
      - name: Output VAR
        id: deploy_tag
        run: |
          echo Variable Is
          echo ${{ env.VERSION }}
          echo "TAG_NAME=${{ env.VERSION }}" >> $GITHUB_OUTPUT

  investigate:
    runs-on: ubuntu-latest
    needs: tagify
    steps:
      - name: Dump context
        uses: crazy-max/ghaction-dump-context@v2

  retag_image_stage:
    needs: [tagify]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'stage') }}
    env:
      TAG_VERSION: ${{needs.tagify.outputs.the_tag}}

    steps:
        - uses: actions/checkout@v3
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        - name: Login to Amazon ECR
          run: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}
  
            # Prepare Vars
            IFS='-'
            read -a parsed_tag <<< "${{ env.TAG_VERSION }}"
            VERSION_ONLY=${parsed_tag[0]}
            ENVIRONMENT=${parsed_tag[1]}
            IFS=' '
            QA_BASE=$VERSION_ONLY-qa
            FULL_TAG=${{ secrets.REPOSITORY }}:$QA_BASE
            NEW_TAG=${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }}
            LATEST_TAG=${{ secrets.REPOSITORY }}:latest
  
            # Debug
            echo Full_Tag $FULL_TAG
            echo New_Tag $NEW_TAG
            echo Latest_Tag $LATEST_TAG
  
            # Push Environment Tag
            docker pull $FULL_TAG
            docker tag $FULL_TAG $NEW_TAG
            docker push $NEW_TAG
  
            # If Prod Push Latest
            case $ENVIRONMENT in
              prod)
                docker tag $FULL_TAG $LATEST_TAG
                docker push $LATEST_TAG
                ;;
            esac

    # Duplication because github - deploy requires s
  retag_image_prod:
    needs: [tagify]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'prod') }}
    env:
      TAG_VERSION: ${{needs.tagify.outputs.the_tag}}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

          # Prepare Vars
          IFS='-'
          read -a parsed_tag <<< "${{ env.TAG_VERSION }}"
          VERSION_ONLY=${parsed_tag[0]}
          ENVIRONMENT=${parsed_tag[1]}
          IFS=' '
          QA_BASE=$VERSION_ONLY-qa
          FULL_TAG=${{ secrets.REPOSITORY }}:$QA_BASE
          NEW_TAG=${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }}
          LATEST_TAG=${{ secrets.REPOSITORY }}:latest

          # Debug
          echo Full_Tag $FULL_TAG
          echo New_Tag $NEW_TAG
          echo Latest_Tag $LATEST_TAG

          # Push Environment Tag
          docker pull $FULL_TAG
          docker tag $FULL_TAG $NEW_TAG
          docker push $NEW_TAG

          # If Prod Push Latest
          case $ENVIRONMENT in
            prod)
              docker tag $FULL_TAG $LATEST_TAG
              docker push $LATEST_TAG
              ;;
          esac


  deploy_qa:
    needs: [tagify]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'qa') }}
    env:
      TAG_VERSION: ${{needs.tagify.outputs.the_tag}}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

    - name: Create SSH Key File
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/RportingKeyPair.pem
          chmod 600 ~/.ssh/RportingKeyPair.pem

    - name: Deploy to EC2
      run: |
          echo "version value ${{ env.TAG_VERSION }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/RportingKeyPair.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            sudo systemctl start docker &&
            sudo usermod -aG docker ec2-user &&
            docker stop reporting-service-api || true &&
            docker rm reporting-service-api || true &&
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }} &&
            docker pull ${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }} &&
            docker run -d -p 80:80 --name reporting-service-api ${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }}
          "
    - name: Cleanup
      run: |

        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_IP_ADDRESS }} 'sudo docker logout'
  
  deploy_stage:
    runs-on: ubuntu-latest
    needs: [tagify,retag_image_stage]
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'stage') }}
    env:
      TAG_VERSION: ${{needs.tagify.outputs.the_tag}}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

    - name: Create SSH Key File
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/RportingKeyPair.pem
          chmod 600 ~/.ssh/RportingKeyPair.pem

    - name: Deploy to EC2
      run: |
          echo "version value ${{ env.TAG_VERSION }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/RportingKeyPair.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            sudo systemctl start docker &&
            sudo usermod -aG docker ec2-user &&
            docker stop reporting-service-api || true &&
            docker rm reporting-service-api || true &&
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }} &&
            docker pull ${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }} &&
            docker run -d -p 80:80 --name reporting-service-api ${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }}
          "
    - name: Cleanup
      run: |

        ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_IP_ADDRESS }} 'sudo docker logout'
  
  
  deploy_prod:
    needs: [tagify,retag_image_prod]
    runs-on: ubuntu-latest
    if: ${{ endsWith(needs.tagify.outputs.the_tag, 'prod') }}
    env:
      TAG_VERSION: ${{needs.tagify.outputs.the_tag}}
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

    - name: Create SSH Key File
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/RportingKeyPair.pem
          chmod 600 ~/.ssh/RportingKeyPair.pem

    - name: Deploy to EC2
      run: |
          echo "version value ${{ env.TAG_VERSION }}"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/RportingKeyPair.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} "
            sudo systemctl start docker &&
            sudo usermod -aG docker ec2-user &&
            docker stop reporting-service-api || true &&
            docker rm reporting-service-api || true &&
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }} &&
            docker pull ${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }} &&
            docker run -d -p 80:80 --name reporting-service-api ${{ secrets.REPOSITORY }}:${{ env.TAG_VERSION }}
          "
    - name: Cleanup
      run: |



